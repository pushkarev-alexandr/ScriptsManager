{
    "openCopy": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import openCopy; openCopy.openCopy()",
        "custom_command": "",
        "tooltip": "Copies the selected script to the temp folder and opens it so as not to modify the user's script",
        "icon": "",
        "shortcut": "Ctrl+Alt+O",
        "shortcut_context": "Без контекста",
        "index": 2,
        "menu_path": "File/Open Copy..."
    },
    "bvfx_findPath": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import bvfx_findPath; bvfx_findPath.bvfx_findPath(False)",
        "custom_command": "",
        "tooltip": "Переподтянет потерянные риды. Нужно указать папку в которой нужно искать потерянные файлы. Указывайте папку максимально близкую к вашему файлу иначе скрипт будет очень долго искать необходимый файл",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/File/Locate files paths"
    },
    "addSquareFormats": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import addSquareFormats; addSquareFormats.addSquareFormats()",
        "custom_command": "",
        "tooltip": "Allows you to add square formats, since by default only square_512 is available",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Formats/Add Square Formats"
    },
    "switchPrecompSetup": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import switchPrecompSetup; switchPrecompSetup.switchPrecompSetup()",
        "custom_command": "",
        "tooltip": "Select a Write node, and a setup is created from it using a Switch node and a Read node",
        "icon": "",
        "shortcut": "Ctrl+Shift+W",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Switch Precomp Setup"
    },
    "smartConnect": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import smartConnect; smartConnect.smartConnect()",
        "custom_command": "",
        "tooltip": "Aligns nodes when connecting them",
        "icon": "",
        "shortcut": "+a",
        "shortcut_context": "1",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Smart Connect"
    },
    "addLabel": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import addLabel; addLabel.addLabel()",
        "custom_command": "",
        "tooltip": "Adds a label to selected nodes; if an empty string is specified, removes the existing label",
        "icon": "",
        "shortcut": "i",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/Node/Add Label"
    },
    "setZinRead": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import setZinRead; setZinRead.setZinRead()",
        "custom_command": "",
        "tooltip": "Changes the path in all Reads from //192.168.100.56/data to disk Z",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/File/Set Z in Read"
    },
    "CardReconcile": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import CardReconcile; CardReconcile.main()",
        "custom_command": "",
        "tooltip": "Creates a CornerPin from a Card node",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Card Reconcile"
    },
    "smartMerge": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import smartMerge; smartMerge.smartMerge()",
        "custom_command": "nuke.menu('Nodes').addCommand('Merge/Merge','import smartMerge; smartMerge.smartMerge()', 'M', shortcutContext=2, icon='Merge.png')",
        "tooltip": "Replaces the standard Merge, connects the B input and places the Merge node below. If several nodes are selected, creates a stack of multiple Merges",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Smart Merge"
    },
    "viewMask": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import viewMask; viewMask.viewMask()",
        "custom_command": "",
        "tooltip": "Puts the alpha channel from the second selected node into the red channel of the first selected node to evaluate where alpha is used. If pressed again, removes the ChannelMerge node",
        "icon": "",
        "shortcut": "Alt+Shift+A",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/View Mask"
    },
    "restoreNodeName": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import restoreNodeName; restoreNodeName.restoreNodeName()",
        "custom_command": "",
        "tooltip": "Sets the node name based on its class name; for Roto nodes, sets output to alpha",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node/Restore Node Name"
    },
    "sortReadsByFilename": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import sortReadsByFilename; sortReadsByFilename.main()",
        "custom_command": "",
        "tooltip": "Sorts and aligns selected Reads by filename",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Sort Reads By Filename"
    },
    "combineZOL": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import combineZOL; combineZOL.main()",
        "custom_command": "",
        "tooltip": "Объединяет left и right рендера на проекте Mazhor в сцене ZOL",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Projects/Mazhor/Combine ZOL"
    },
    "createBlur": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import createBlur; createBlur.main()",
        "custom_command": "",
        "tooltip": "When creating a Blur node, links its size to the Erode node if Erode was selected before creation",
        "icon": "",
        "shortcut": "Ctrl+B",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/Create/Link Blur to Erode"
    },
    "renameFile": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import renameFile; renameFile.main()",
        "custom_command": "",
        "tooltip": "Renames a file and updates the name in the selected Read node",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/File/Rename File"
    },
    "knobCreater": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import knobCreater; knobCreater.knobCreater()",
        "custom_command": "",
        "tooltip": "Nuke does not allow creating certain knobs like IArray_Knob and Eyedropper_Knob from the menu; this script provides a custom menu for such knobs",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Knobs/Add Custom Knob"
    },
    "skewNodes": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import skewNodes; skewNodes.skewNodes()",
        "custom_command": "",
        "tooltip": "Shifts nodes so they are not in a single vertical line",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Skew Nodes"
    },
    "RenderSetup": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import RenderSetup; RenderSetup.main()",
        "custom_command": "",
        "tooltip": "Раскладывает рендер по пасам и создает базовое дерево объединяя все пасы",
        "icon": "",
        "shortcut": "[",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Render/Render Setup"
    },
    "batchRename": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import batchRename; batchRename.batchRename()",
        "custom_command": "",
        "tooltip": "Select a folder; in all files in this folder, the string 'from' will be renamed to 'to'. For example, you can rename version v002 to v003",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/File/Batch Rename"
    },
    "FooocusViewer": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import FooocusViewer; FooocusViewer.FooocusViewer()",
        "custom_command": "import FooocusViewer\nnukescripts.registerWidgetAsPanel('FooocusViewer.ImageGallery', 'Fooocus Viewer', 'uk.co.thefoundry.FooocusViewer')",
        "tooltip": "Panel for Fooocus, displays images generated via Fooocus",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "NukePanels/Fooocus Viewer"
    },
    "openNkAsNewComp": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import openNkAsNewComp; openNkAsNewComp.openNkAsNewComp()",
        "custom_command": "from openNkAsNewComp import openNkAsNewComp\nnukescripts.addDropDataCallback(openNkAsNewComp)",
        "tooltip": "If you drop a .nk file into Nuke, it will open as a new project instead of copying its contents",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "CallbackScripts/Open Nk As New Comp"
    },
    "MakeProxy": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import MakeProxy; MakeProxy.main()",
        "custom_command": "",
        "tooltip": "Renders proxy to the Temp folder for selected Reads and sets the path in Read proxy",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Render/Make Proxy"
    },
    "addNPLayers": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import addNPLayers; addNPLayers.addNPLayers()",
        "custom_command": "",
        "tooltip": "Adds N and P layers which are not present in Nuke by default but are very useful",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Channels/Add N P Layers"
    },
    "checkChannels": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import checkChannels; checkChannels.checkChannels()",
        "custom_command": "",
        "tooltip": "Select two nodes; the script checks if the channels in these two nodes match. Useful for comparing if channels are missing or new ones have appeared in a new render",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Channels/Check Channels"
    },
    "bakeRelativePaths": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import bakeRelativePaths; bakeRelativePaths.bakeRelativePaths()",
        "custom_command": "",
        "tooltip": "For selected Read nodes (or all Reads if none are selected), replaces relative paths with full paths using getEvaluatedValue",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/File/Bake Relative Paths"
    },
    "openInLamaCleaner": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import openInLamaCleaner; openInLamaCleaner.openInLamaCleaner()",
        "custom_command": "",
        "tooltip": "Opens the selected Read in the Lama-Cleaner application",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/ML/Open In Lama Cleaner"
    },
    "OllamaChat": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import OllamaChat; OllamaChat.main()",
        "custom_command": "",
        "tooltip": "Chat with artificial intelligence",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/ML/Ollama Chat"
    },
    "bakeDotsColor": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import bakeDotsColor; bakeDotsColor.bakeDotsColor()",
        "custom_command": "",
        "tooltip": "Bakes the label color of the selected dot (or all if none are selected) into HTML code. After this, the label color does not change when zooming in or out. Created for the Mira project where colored labels on dots were needed but remained black and white",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node/Bake Dots Color"
    },
    "showClassName": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import showClassName; showClassName.showClassName()",
        "custom_command": "",
        "tooltip": "Displays a message with the class names of selected nodes",
        "icon": "",
        "shortcut": "Ctrl+Alt+Shift+I",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node/Show Class Name"
    },
    "dotify": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import dotify; dotify.main()",
        "custom_command": "",
        "tooltip": "Instead of a fan of inputs diverging from one dot, creates a grid",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Dotify"
    },
    "unhideAllInputs": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import unhideAllInputs; unhideAllInputs.unhideAllInputs()",
        "custom_command": "",
        "tooltip": "Makes all inputs visible",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Unhide All Inputs"
    },
    "cornerPinToTracker": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import cornerPinToTracker; cornerPinToTracker.cornerPinToTracker()",
        "custom_command": "",
        "tooltip": "Converts all animated knobs to Tracker node trackers",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/CornerPin to Tracker"
    },
    "RelinkReadsGlobal": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import RelinkReadsGlobal; RelinkReadsGlobal.relink_render_root_global()",
        "custom_command": "",
        "tooltip": "Cкрипт для переподтягивания рендеров, делался преимущественно для сцены ZOL в проекте Mazhor",
        "icon": "",
        "shortcut": "Ctrl+Alt+G",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Projects/Mazhor/Relink Reads Global"
    },
    "Dots": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import Dots; Dots.Dots()",
        "custom_command": "",
        "tooltip": "Скрипт для выравнивания точек по углам. Скинул Айдар",
        "icon": "",
        "shortcut": ",",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Dots"
    },
    "jumpBetweenClones": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import jumpBetweenClones; jumpBetweenClones.jumpBetweenClones()",
        "custom_command": "",
        "tooltip": "Allows switching between clones",
        "icon": "",
        "shortcut": "Shift+W",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Jump Between Clones"
    },
    "lockPosition": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import lockPosition; lockPosition.lockPosition()",
        "custom_command": "",
        "tooltip": "Locks the position of selected nodes in their current place. Calling the command again unlocks position changes. Adds code to the node's knobChanged to block position changes.",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Lock Position"
    },
    "moveNodes": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import moveNodes; moveNodes.moveNodes()",
        "custom_command": "nuke.menu('Nuke').addCommand('GreenFX/Node Graph/Move Nodes/Up', 'import moveNodes; moveNodes.moveSel_up()', 'Ctrl+Shift+Up')\nnuke.menu('Nuke').addCommand('GreenFX/Node Graph/Move Nodes/Down', 'import moveNodes; moveNodes.moveSel_down()', 'Ctrl+Shift+Down')\nnuke.menu('Nuke').addCommand('GreenFX/Node Graph/Move Nodes/Right', 'import moveNodes; moveNodes.moveSel_right()', 'Ctrl+Shift+Right')\nnuke.menu('Nuke').addCommand('GreenFX/Node Graph/Move Nodes/Left', 'import moveNodes; moveNodes.moveSel_left()', 'Ctrl+Shift+Left')",
        "tooltip": "Allows moving nodes with arrow keys in the node graph",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Move Nodes"
    },
    "labelConnector": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import labelConnector; labelConnector.labelConnector()",
        "custom_command": "",
        "tooltip": "Создает ноды с подписями к которым потом можно подключиться из любого места",
        "icon": "",
        "shortcut": "+#Q",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Label Connector"
    },
    "ReloadModule": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import ReloadModule; ReloadModule.ReloadModule()",
        "custom_command": "",
        "tooltip": "Reloads the module with the specified name. Useful when you have made changes to a module",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Utilities/Reload Module"
    },
    "corenerpinLabel": {
        "default": true,
        "custom_cmd_checkbox": true,
        "command": "import corenerpinLabel; corenerpinLabel.corenerpinLabel()",
        "custom_command": "import corenerpinLabel",
        "tooltip": "When pressing the copy_from or copy_to button, removes the matchmove or stabilize label (this label is set by the matchmove/stabilize button in the hotbox)",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Corenerpin Label"
    },
    "distortTracker": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import distortTracker; distortTracker.distortTracker()",
        "custom_command": "",
        "tooltip": "Distorts the position of Tracker node points using a distortion equalizer node",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Distort Tracker"
    },
    "mergeTrackers": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import mergeTrackers; mergeTrackers.mergeTrackers()",
        "custom_command": "",
        "tooltip": "Merges several selected Tracker nodes into one node",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Merge Trackers Nodes"
    },
    "transformCornerPin": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import transformCornerPin; transformCornerPin.transformCornerPin()",
        "custom_command": "",
        "tooltip": "Transforms CornerPin points as specified in the selected Transform node",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Transform CornerPin"
    },
    "transformTracker": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import transformTracker; transformTracker.transformTracker()",
        "custom_command": "",
        "tooltip": "Transforms Tracker points as specified in the selected Transform node",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Transform Tracker"
    },
    "listFrameServerWorkers": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import listFrameServerWorkers; listFrameServerWorkers.listFrameServerWorkers()",
        "custom_command": "",
        "tooltip": "Displays a list of available host machines running FrameServer and accessible from the current machine, i.e. where you can send renders using Nuke's standard tools",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Utilities/List Frame Server Workers"
    },
    "PerformanceTimers": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import PerformanceTimers; PerformanceTimers.PerformanceTimers()",
        "custom_command": "import PerformanceTimers",
        "tooltip": "Adds buttons to enable and disable Performance Timers in Nuke",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Utilities/Performance Timers"
    },
    "fullFrameProcessingByDefault": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import fullFrameProcessingByDefault; fullFrameProcessingByDefault.fullFrameProcessingByDefault()",
        "custom_command": "nuke.knobDefault('Viewer.full_frame_processing', 'True')",
        "tooltip": "Если плагин включен, то новый вьювер будет создаваться с включенным full_frame_processing",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Viewer/Full Frame Processing By Default"
    },
    "updateLocalization": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import updateLocalization; updateLocalization.updateLocalization()",
        "custom_command": "from updateLocalization import updateLocalizationMain\nnuke.addAfterRender(updateLocalizationMain)",
        "tooltip": "When rendering finishes, the script finds the Read node that corresponds to the Write node used for rendering and updates localization",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "CallbackScripts/Update Localization"
    },
    "renderLog": {
        "default": true,
        "custom_cmd_checkbox": true,
        "command": "import renderLog; renderLog.renderLog()",
        "custom_command": "import renderLog\nnuke.addAfterRender(renderLog.renderLog)\nnuke.menu('Nuke').addCommand('GreenFX/File/Nk Script Path from Read', 'import renderLog;renderLog.getRelatedScriptPath()')",
        "tooltip": "After rendering, saves to the database the path to the rendered file and the path to the script that rendered this file.",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/File/Render Log"
    },
    "open_remove_localization": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import open_remove_localization; open_remove_localization.open_remove_localization()",
        "custom_command": "nuke.menu('Nuke').addCommand('Cache/Localization/Open Localization Folder', 'import open_remove_localization;open_remove_localization.open_localization_folder()')\nnuke.menu('Nuke').addCommand('Cache/Localization/Remove Localization Folder', 'import open_remove_localization;open_remove_localization.remove_localization_folder()')",
        "tooltip": "Adds extra buttons to the Cache/Localization menu for opening the localization folder and removing this folder",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "Cache/Localization/Open_Remove_Localization"
    },
    "CustomGuides": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import CustomGuides",
        "custom_command": "import CustomGuides",
        "tooltip": "Adds rule of thirds and symmetry guides to the viewer. Also adds a new matte format 2.387 for 2048x858.",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "Custom/Custom Guides"
    },
    "CropKarma": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import CropKarma; CropKarma.export_crop_to_ndc()",
        "custom_command": "",
        "tooltip": "",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Projects/Mazhor/Crop Karma"
    },
    "combineZOLKarma": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import combineZOLKarma; combineZOLKarma.main()",
        "custom_command": "",
        "tooltip": "",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Projects/Mazhor/Combine ZOL Karma"
    },
    "SplitRenderZOL": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import SplitRenderZOL; SplitRenderZOL.SplitRender()",
        "custom_command": "",
        "tooltip": "Разделяет рендер по пасам с кастомной логикой, клонированием Grade и подгрузкой утилит",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Projects/Mazhor/Split Render ZOL"
    },
    "AfanasyButtons": {
        "default": true,
        "custom_cmd_checkbox": true,
        "command": "import AfanasyButtons; AfanasyButtons.AfanasyButtons()",
        "custom_command": "nuke.menu('Nuke').addCommand('Render/Afanasy/Set Free', 'import AfanasyButtons; AfanasyButtons.setFree()', icon='free.png')\nnuke.menu('Nuke').addCommand('Render/Afanasy/Eject and NIMBY', 'import AfanasyButtons; AfanasyButtons.ejectAndNIMBY()', icon='stop.png')",
        "tooltip": "Adds Set Free and Eject and NIMBY buttons to Nuke",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "Render/Afanasy Buttons"
    },
    "createReadFromWrite": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import createReadFromWrite; createReadFromWrite.createReadFromWrite()",
        "custom_command": "",
        "tooltip": "Creates a Read node from a Write node",
        "icon": "",
        "shortcut": "+r",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/File/Read from Write"
    },
    "openInExplorer": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import openInExplorer; openInExplorer.openInExplorer()",
        "custom_command": "",
        "tooltip": "This script opens the folder containing the file referenced by the selected node in Nuke. If no node is selected, it opens the folder of the current script.",
        "icon": "",
        "shortcut": "Shift+B",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/File/Open in Explorer"
    },
    "readShot": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import readShot; readShot.readShot()",
        "custom_command": "",
        "tooltip": "Откроет диалог выбора файла для указанного шота, работает как openScript",
        "icon": "",
        "shortcut": "^+r",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/File/Read Shot"
    },
    "copyToNewVersion": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import copyToNewVersion; copyToNewVersion.copyToNewVersion()",
        "custom_command": "",
        "tooltip": "Copies all files of the selected Read node to a new version (tested only on sequences)",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/File/Copy to New Version"
    },
    "extendFrames": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import extendFrames; extendFrames.extendFrames()",
        "custom_command": "",
        "tooltip": "Extend frames for Read node",
        "icon": "",
        "shortcut": "Alt+Shift+D",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/File/Extend Frames"
    },
    "bvfx_relativize": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import bvfx_relativize; bvfx_relativize.bvfx_relativize()",
        "custom_command": "",
        "tooltip": "This script will add a TCL expression to make all the file paths relatives in the script and keep original TCL/python functions in the file names",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Proj/Make paths relative"
    },
    "collectFiles": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import collectFiles; collectFiles.collectFiles()",
        "custom_command": "",
        "tooltip": "",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Proj/Collect Files"
    },
    "WrapItUp": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import WrapItUp; WrapItUp.WrapItUp()",
        "custom_command": "",
        "tooltip": "Можно сделать коллект с помощью этого скрипта",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Proj/Wrap It Up"
    },
    "scriptcleanup": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import scriptcleanup; scriptcleanup.scriptcleanup()",
        "custom_command": "",
        "tooltip": "Можно почистить скрипт от одиноких нод",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Proj/Script Cleanup"
    },
    "clearNkFolder": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import clearNkFolder; clearNkFolder.clearNkFolder()",
        "custom_command": "",
        "tooltip": "Moves all Afanasy scripts, autosaves, and temporary files ending with a tilde to the autosave folder",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Proj/Clear nk folder"
    },
    "wbMultiKnobEdit": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import wbMultiKnobEdit; wbMultiKnobEdit.multiEditExec()",
        "custom_command": "",
        "tooltip": "Можно выделить несколько нод и изменять одинаковые кнобы у них одновременно",
        "icon": "",
        "shortcut": "F12",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node/Multi Knob Edit Tool"
    },
    "batchKnobEdit": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import batchKnobEdit; batchKnobEdit.batchKnobEdit()",
        "custom_command": "",
        "tooltip": "Allows you to change the value of a specified parameter or set an expression for multiple selected nodes",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node/Batch Knob Edit"
    },
    "lifetimeRoto": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import lifetimeRoto; lifetimeRoto.setRotoLifeTime()",
        "custom_command": "",
        "tooltip": "Можно выставить lifetime для выбранной кривой в рэндж по первому и последнему кадру анимации",
        "icon": "",
        "shortcut": "Shift+L",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Roto/Set Roto Lifetime"
    },
    "extractSelectedShapes": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import extractSelectedShapes; extractSelectedShapes.extractSelectedShapes()",
        "custom_command": "",
        "tooltip": "Можно в выбранном рото вытащить отдельные shapes сделав каждую в виде отдельной ноды",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Roto/Extract Selected Shapes"
    },
    "FollowPath": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import FollowPath; FollowPath.FollowPath()",
        "custom_command": "",
        "tooltip": "This script animates an object to move along a Roto or RotoPaint node's curve, automatically creating a Transform node with translation and rotation following the path",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Roto/Follow Path"
    },
    "moveRotoLifetime": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import moveRotoLifetime; moveRotoLifetime.moveRotoLifetime()",
        "custom_command": "",
        "tooltip": "Shifts the lifetime of elements in the Roto/RotoPaint node by the specified number of frames",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Roto/Move Lifetime"
    },
    "UpdateRenders": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import UpdateRenders; UpdateRenders.main()",
        "custom_command": "",
        "tooltip": "Вроде как подставляет новую версию рендера для выбранных ридов",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Render/Update Renders"
    },
    "SplitRender": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import SplitRender; SplitRender.SplitRender()",
        "custom_command": "",
        "tooltip": "Splits render by passes using shuffle",
        "icon": "",
        "shortcut": "Ctrl+Alt+S",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/Render/Split Render"
    },
    "screenshotFromViewer": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import screenshotFromViewer; screenshotFromViewer.screenshotFromViewer()",
        "custom_command": "",
        "tooltip": "Renders the current frame of the active viewer and saves it to the current script's folder in the 'screenshots' subfolder or in the NUKE_TEMP_DIR folder",
        "icon": "",
        "shortcut": "F3",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "Render/Screenshot"
    },
    "merge_transforms_v2": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import merge_transforms_v2; merge_transforms_v2.start()",
        "custom_command": "",
        "tooltip": "Позволяет объединить несколько подряд идущих трансформов в один. Поддерживает CornerPin",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Merge Transforms"
    },
    "sb_bakeWorldPosition": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import sb_bakeWorldPosition; sb_bakeWorldPosition.sb_bakeWorldPosition()",
        "custom_command": "",
        "tooltip": "ChatGPT сказал что этот скрипт запекает матрицу трансформации в обычный трансформ, ротэйт и скейл, но это не точно",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Bake World Position"
    },
    "pasteTransformation": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import pasteTransformation; pasteTransformation.pasteTransformation()",
        "custom_command": "nuke.menu('Nuke').addCommand('GreenFX/Transform/pasteTransformation(copy)', 'import pasteTransformation; pasteTransformation.pasteTransformation(link = False)', 'Ctrl+Shift+T', shortcutContext=2)\nnuke.menu('Nuke').addCommand('GreenFX/Transform/pasteTransformation(link)', 'import pasteTransformation; pasteTransformation.pasteTransformation(link = True)')",
        "tooltip": "Выбираем ноду с помощью которой хотим затречить рото(Tracker, Transform, CornerPin) нажимаем Ctrl+C. Затем выбираем ноду рото и слой который хотим затречить, нажимаем Ctrl+Shift+T и в выбранный слой копируется информация о трансформе. Нода полезна тем, что стандартными средствами вы не сможете вставить информацию о CornerPin прямо в рото",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Transform/Paste Transformation"
    },
    "W_smartAlign": {
        "default": true,
        "custom_cmd_checkbox": true,
        "command": "import W_smartAlign; W_smartAlign.W_smartAlign()",
        "custom_command": "nuke.menu('Nuke').addCommand('GreenFX/Node Graph/W_smartAlign/Left', 'import W_smartAlign; W_smartAlign.alignNodes(\"left\")', 'Shift+left', shortcutContext=2)\nnuke.menu('Nuke').addCommand('GreenFX/Node Graph/W_smartAlign/Right', 'import W_smartAlign; W_smartAlign.alignNodes(\"right\")', 'Shift+right', shortcutContext=2)\nnuke.menu('Nuke').addCommand('GreenFX/Node Graph/W_smartAlign/Up', 'import W_smartAlign; W_smartAlign.alignNodes(\"up\")', 'Shift+up', shortcutContext=2)\nnuke.menu('Nuke').addCommand('GreenFX/Node Graph/W_smartAlign/Down', 'import W_smartAlign; W_smartAlign.alignNodes(\"down\")', 'Shift+down', shortcutContext=2)",
        "tooltip": "Можно выровнять ноды по крайней правой, левой, верхней или нижней",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/W_Smart Align"
    },
    "AlignDots": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import AlignDots; AlignDots.AlignDots()",
        "custom_command": "",
        "tooltip": "Для выбраной ноды выравнивает точки которые к ней подсоидинены, для выбраной точки выравнивает точку в угол",
        "icon": "",
        "shortcut": "Shift+Alt+Z",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Align Dots"
    },
    "W_scaleTree": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import W_scaleTree; W_scaleTree.scaleTreeFloatingPanel()",
        "custom_command": "",
        "tooltip": "Можно увеличивать расстояние между выбранными нодами",
        "icon": "",
        "shortcut": "Alt+`",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/W_ScaleTree"
    },
    "viewDifference": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import viewDifference; viewDifference.viewDifference()",
        "custom_command": "",
        "tooltip": "If a Switch node is selected, compares two images from the switch inputs using difference.\nIf two nodes are selected, compares them. If a Merge node is selected, deletes it.\nIf nothing is selected, creates a Merge node in difference mode.",
        "icon": "",
        "shortcut": "Shift+D",
        "shortcut_context": "2",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/View Difference"
    },
    "toggleWorkingSpace": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import toggleWorkingSpace; toggleWorkingSpace.toggleWorkingSpace()",
        "custom_command": "",
        "tooltip": "Toggles between ACEScg and ACES2065 in Nuke's working space settings",
        "icon": "",
        "shortcut": "Alt+Shift+W",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Toggle Working Space"
    },
    "stickyShotName": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import stickyShotName; stickyShotName.stickyShotName()",
        "custom_command": "",
        "tooltip": "Adds sticky notes to Read nodes with a recognizable shot name",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Node Graph/Sticky Shot Name"
    },
    "mocha_retarget": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import mocha_retarget; mocha_retarget.mocha_retarget()",
        "custom_command": "",
        "tooltip": "Меняет ключевой кадр корнерпина экспорченного из мокки",
        "icon": "",
        "shortcut": "Alt+R",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Mocha/mocha retarget"
    },
    "send_to_mocha": {
        "default": true,
        "custom_cmd_checkbox": false,
        "command": "import send_to_mocha; send_to_mocha.send_to_mocha()",
        "custom_command": "",
        "tooltip": "Откроет выбранный Read в Stand Alone версии MochaPro. Найдет последнюю установленную версию на компьютере",
        "icon": "mocha.png",
        "shortcut": "Alt+M",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Mocha/Send to mocha"
    },
    "sb_deleteViewers": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import sb_deleteViewers; sb_deleteViewers.sb_deleteViewers()",
        "custom_command": "",
        "tooltip": "Удалит все вьюверы, даже те которые внутри гизм и групп",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Viewer/Delete All Viewers"
    },
    "viewerJumper": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import viewerJumper; viewerJumper.viewerJumper()",
        "custom_command": "nuke.menu('Nuke').addCommand('GreenFX/Viewer/Jump Right', 'import viewerJumper; viewerJumper.viewerJumper(right=True)', 'Ctrl+Right', shortcutContext=2)\nnuke.menu('Nuke').addCommand('GreenFX/Viewer/Jump Left', 'import viewerJumper; viewerJumper.viewerJumper(right=False)', 'Ctrl+Left', shortcutContext=2)",
        "tooltip": "Can jump between adjacent Read nodes",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Viewer/Viewer Jumper"
    },
    "toggleMaskingMode": {
        "default": false,
        "custom_cmd_checkbox": false,
        "command": "import toggleMaskingMode; toggleMaskingMode.toggleMaskingMode()",
        "custom_command": "",
        "tooltip": "Toggles masking mode",
        "icon": "",
        "shortcut": "Ctrl+Alt+D",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Viewer/Toggle Masking Mode"
    },
    "viewerInputNodes": {
        "default": false,
        "custom_cmd_checkbox": true,
        "command": "import viewerInputNodes; viewerInputNodes.viewerInputNodes()",
        "custom_command": "ip = nuke.menu('Nuke').menu('GreenFX').menu('Viewer').addMenu('Input Process', icon='IP.png')\nip.addCommand('HSV IP', 'import viewerInputNodes; viewerInputNodes.viewerInput(ipNode=\"HSV\")')\nip.addCommand('Normalize IP', 'import viewerInputNodes; viewerInputNodes.viewerInput(ipNode=\"Normalize\")')\nip.addCommand('Mirror IP', 'import viewerInputNodes; viewerInputNodes.viewerInput(ipNode=\"Mirror\")')\nip.addCommand('Choose from list', 'import viewerInputNodes; viewerInputNodes.viewerInput()')\nip.addCommand('Remove IP', 'import viewerInputNodes; viewerInputNodes.viewerInput(ipNode=\"Remove\")')",
        "tooltip": "Можно выбрать из преднастроек какой input process включить",
        "icon": "",
        "shortcut": "",
        "shortcut_context": "Без контекста",
        "index": -1,
        "menu_path": "GreenFX/Viewer/Viewer Input Nodes"
    }
}